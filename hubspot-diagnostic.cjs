#!/usr/bin/env node

/**
 * Script de diagnostic pour les probl√®mes de connexion HubSpot
 * Ce script teste diff√©rents aspects de l'int√©gration HubSpot
 */

const https = require('https');
const http = require('http');

// Configuration
const BACKEND_URL = 'http://localhost:3001';
const HUBSPOT_API_URL = 'https://api.hubapi.com';

// Couleurs pour la console
const colors = {
  red: '\x1b[31m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  blue: '\x1b[34m',
  reset: '\x1b[0m'
};

function log(message, color = 'reset') {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

function makeRequest(url, options = {}) {
  return new Promise((resolve, reject) => {
    const isHttps = url.startsWith('https');
    const client = isHttps ? https : http;
    
    const req = client.request(url, options, (res) => {
      let data = '';
      res.on('data', chunk => data += chunk);
      res.on('end', () => {
        try {
          const jsonData = JSON.parse(data);
          resolve({ status: res.statusCode, data: jsonData, headers: res.headers });
        } catch (e) {
          resolve({ status: res.statusCode, data: data, headers: res.headers });
        }
      });
    });
    
    req.on('error', reject);
    
    if (options.body) {
      req.write(options.body);
    }
    
    req.end();
  });
}

async function testBackendHealth() {
  log('\nüîç Test 1: V√©rification de l\'√©tat du backend...', 'blue');
  
  try {
    const response = await makeRequest(`${BACKEND_URL}/health`);
    if (response.status === 200) {
      log('‚úÖ Backend accessible et fonctionnel', 'green');
      return true;
    } else {
      log(`‚ùå Backend r√©pond avec le statut ${response.status}`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå Impossible de contacter le backend: ${error.message}`, 'red');
    log('üí° Assurez-vous que le serveur backend est d√©marr√© avec "npm run dev"', 'yellow');
    return false;
  }
}

async function testHubSpotDirectAccess(apiKey) {
  log('\nüîç Test 2: Test direct de l\'API HubSpot...', 'blue');
  
  if (!apiKey) {
    log('‚ö†Ô∏è  Aucune cl√© API fournie pour le test direct', 'yellow');
    return false;
  }
  
  try {
    const response = await makeRequest(`${HUBSPOT_API_URL}/crm/v3/objects/contacts?limit=1`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.status === 200) {
      log('‚úÖ Connexion directe √† HubSpot r√©ussie', 'green');
      log(`üìä Donn√©es re√ßues: ${JSON.stringify(response.data).substring(0, 100)}...`, 'blue');
      return true;
    } else if (response.status === 401) {
      log('‚ùå Cl√© API invalide ou permissions insuffisantes', 'red');
      log('üí° V√©rifiez que votre cl√© API a les permissions "contacts.read"', 'yellow');
      return false;
    } else {
      log(`‚ùå Erreur HubSpot: ${response.status} - ${JSON.stringify(response.data)}`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå Erreur de connexion directe: ${error.message}`, 'red');
    return false;
  }
}

async function testProxyEndpoint(apiKey) {
  log('\nüîç Test 3: Test du proxy backend...', 'blue');
  
  if (!apiKey) {
    log('‚ö†Ô∏è  Aucune cl√© API fournie pour le test du proxy', 'yellow');
    return false;
  }
  
  try {
    const response = await makeRequest(`${BACKEND_URL}/api/integrations/hubspot/proxy/crm/v3/objects/contacts?limit=1`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${apiKey}`,
        'Content-Type': 'application/json'
      }
    });
    
    if (response.status === 200) {
      log('‚úÖ Proxy backend fonctionnel', 'green');
      return true;
    } else if (response.status === 401) {
      log('‚ùå Probl√®me d\'authentification via le proxy', 'red');
      return false;
    } else {
      log(`‚ùå Erreur proxy: ${response.status} - ${JSON.stringify(response.data)}`, 'red');
      return false;
    }
  } catch (error) {
    log(`‚ùå Erreur de connexion au proxy: ${error.message}`, 'red');
    return false;
  }
}

function validateApiKey(apiKey) {
  log('\nüîç Test 4: Validation du format de la cl√© API...', 'blue');
  
  if (!apiKey) {
    log('‚ùå Aucune cl√© API fournie', 'red');
    return false;
  }
  
  // V√©rification du format de la cl√© API HubSpot
  if (apiKey.startsWith('pat-na1-') || apiKey.startsWith('pat-eu1-')) {
    log('‚úÖ Format de cl√© API valide (Private App Token)', 'green');
    return true;
  } else if (apiKey.startsWith('eu1-') && apiKey.length >= 30) {
    log('‚úÖ Format de cl√© API valide (EU Region Token)', 'green');
    return true;
  } else if (apiKey.length === 39 && apiKey.includes('-')) {
    log('‚úÖ Format de cl√© API valide (Legacy)', 'green');
    return true;
  } else {
    log('‚ö†Ô∏è  Format de cl√© API non reconnu', 'yellow');
    log('üí° Les cl√©s API HubSpot commencent par "pat-na1-", "pat-eu1-" ou "eu1-" (r√©gion EU)', 'yellow');
    return false;
  }
}

function showRecommendations() {
  log('\nüìã RECOMMANDATIONS POUR R√âSOUDRE LES PROBL√àMES:', 'blue');
  log('\n1. üîë V√©rification de la cl√© API:', 'yellow');
  log('   - Utilisez une cl√© d\'application priv√©e (Private App)');
  log('   - Assurez-vous qu\'elle a les permissions "contacts.read"');
  log('   - La cl√© doit commencer par "pat-na1-" ou "pat-eu1-"');
  
  log('\n2. üîß Configuration de l\'application priv√©e HubSpot:', 'yellow');
  log('   - Allez dans Param√®tres > Int√©grations > Applications priv√©es');
  log('   - Cr√©ez une nouvelle application priv√©e');
  log('   - Activez les scopes: contacts, companies, deals');
  log('   - Copiez le token d\'acc√®s g√©n√©r√©');
  
  log('\n3. üåê V√©rification du backend:', 'yellow');
  log('   - Le serveur backend doit √™tre d√©marr√© (npm run dev)');
  log('   - V√©rifiez que le port 3001 est libre');
  log('   - Consultez les logs du backend pour les erreurs');
  
  log('\n4. üîí Permissions requises:', 'yellow');
  log('   - crm.objects.contacts.read');
  log('   - crm.objects.companies.read');
  log('   - crm.objects.deals.read');
}

async function main() {
  log('üöÄ DIAGNOSTIC DE CONNEXION HUBSPOT', 'green');
  log('=====================================\n', 'green');
  
  // R√©cup√©rer la cl√© API depuis les arguments de ligne de commande
  const apiKey = process.argv[2];
  
  if (!apiKey) {
    log('‚ö†Ô∏è  Aucune cl√© API fournie', 'yellow');
    log('Usage: node hubspot-diagnostic.js <votre-cle-api-hubspot>', 'blue');
    log('Exemple: node hubspot-diagnostic.js pat-na1-xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\n', 'blue');
  }
  
  // Tests s√©quentiels
  const backendOk = await testBackendHealth();
  validateApiKey(apiKey);
  
  if (backendOk && apiKey) {
    await testHubSpotDirectAccess(apiKey);
    await testProxyEndpoint(apiKey);
  }
  
  showRecommendations();
  
  log('\nüèÅ Diagnostic termin√©', 'green');
}

// Gestion des erreurs non captur√©es
process.on('uncaughtException', (error) => {
  log(`‚ùå Erreur non g√©r√©e: ${error.message}`, 'red');
  process.exit(1);
});

process.on('unhandledRejection', (reason) => {
  log(`‚ùå Promesse rejet√©e: ${reason}`, 'red');
  process.exit(1);
});

// Ex√©cution du diagnostic
main().catch(console.error);